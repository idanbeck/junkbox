// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 mat4CameraToWorld;
float4x4 mat4InverseCameraProjection;
float2 _PixelOffset;
float4 _DirectionalLight;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

Texture2D<float4> textureAlbedo;
SamplerState samplertextureAlbedo;

static const float PI = 3.14159265f;

float2 _Pixel;
float _Seed;

struct Ray {
    float3 ptOrigin;
    float3 vDirection;
    float3 energy;
};

struct Sphere {
    float3 ptPosition;
    float radius;
    float3 cAlbedo;
    float3 cSpecular;
    float smoothness;
    float3 cEmission;
};


struct MeshObject {
    float4x4 mat4LocalToWorld;
    int indices_offset;
    int indices_count;
};

StructuredBuffer<Sphere> _Spheres;
StructuredBuffer<MeshObject> _MeshObjects;
StructuredBuffer<float3> _Vertices;
StructuredBuffer<float3> _Normals;
StructuredBuffer<float2> _UVs;
StructuredBuffer<int> _Indices;

Ray CreateRay(float3 ptOrigin, float3 vDirection) {
    Ray r;
    
    r.ptOrigin = ptOrigin;
    r.vDirection = vDirection;
    r.energy = float3(1.0f, 1.0f, 1.0f);

    return r;
}

struct RayHit {
    float3 ptPosition;
    float distance;
    float3 vNormal;
    float3 cAlbedo;
    float3 cSpecular;
    float smoothness;
    float3 cEmission;
};

RayHit CreateRayHit() {
    RayHit h;
    
    h.ptPosition = float3(0.0f, 0.0f, 0.0f);
    h.distance = 1.#INF;
    h.vNormal = float3(0.0f, 0.0f, 0.0f);
    h.cAlbedo = float3(0.0f, 0.0f, 0.0f);
    h.cSpecular = float3(0.0f, 0.0f, 0.0f);
    h.smoothness = 0.0f;
    h.cEmission = float3(0.0f, 0.0f, 0.0f);

    return h;
}

float rand() {
    float result = frac(sin(_Seed / 100.0f * dot(_Pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    _Seed += 1.0f;
    return result;
}
float SmoothnessToPhongAlpha(float s) {
    return pow(1000.0f, s * s);
}

static const float EPSILON = 1e-8;


// Moller-Trumbore Intersection implementation
bool IntersectTriangle_MT97(Ray r, float3 v0, float3 v1, float3 v2,
    inout float t, inout float u, inout float v)
{
    float3 E1 = v1 - v0;
    float3 E2 = v2 - v0;

    float3 P = cross(r.vDirection, E2);

    // Determinant
    float det = dot(E1, P);
    // Backface culling
    if (det < EPSILON)
        return false;
    float inv_det = 1.0f / det;

    // Distance from v0 to ray origin
    float3 T = r.ptOrigin - v0;

    // Calculate U
    u = dot(T, P) * inv_det;
    if (u < 0.0 || u > 1.0f)
        return false;

    float3 Q = cross(T, E1);

    // Calculate V
    v = dot(r.vDirection, Q) * inv_det;
    if (v < 0.0 || u + v > 1.0f)
        return false;

    t = dot(E2, Q) * inv_det;

    return true;
}

struct Quad {
    float3 verts[4];
    float2 uvs[4];
};

void IntersectQuad(Ray r, inout RayHit bestHit, Quad quadObject) {
    
    float2 uv, uv_p;
    float t, u, v;
    bool fHit = false;

    if (IntersectTriangle_MT97(r, quadObject.verts[0], quadObject.verts[1], quadObject.verts[2], t, u, v)) {
        uv = u * quadObject.uvs[1] + v * quadObject.uvs[2] + (1 - u - v) * quadObject.uvs[0];
        fHit = true;
    }
    else if (IntersectTriangle_MT97(r, quadObject.verts[3], quadObject.verts[2], quadObject.verts[1], t, u, v)) {
        uv = u * quadObject.uvs[2] + v * quadObject.uvs[1] + (1 - u - v) * quadObject.uvs[3];
        fHit = true;
    }

    uv_p = float2(uv.x, uv.y);

    if (fHit && t > 0 && t < bestHit.distance) {
        bestHit.distance = t;
        bestHit.ptPosition = r.ptOrigin + t * r.vDirection;
        bestHit.vNormal = normalize(cross(quadObject.verts[1] - quadObject.verts[0], quadObject.verts[2] - quadObject.verts[0]));
        //bestHit.cAlbedo = 0.00f;

        float2 uv_p = float2(uv.x, uv.y);
        bestHit.cAlbedo = textureAlbedo.SampleLevel(samplertextureAlbedo, uv_p, 0).xyz;

        bestHit.cSpecular = 0.03f;
        bestHit.smoothness = 0.05f;
        bestHit.cEmission = 0.0f;
    }
}

void IntersectMeshObject(Ray r, inout RayHit bestHit, MeshObject meshObject) {
    uint offset = meshObject.indices_offset;
    uint count = offset + meshObject.indices_count;
    
    for (uint i = offset; i < count; i += 3) {

        // Vertices
        float3 v0 = (mul(meshObject.mat4LocalToWorld, float4(_Vertices[_Indices[i]], 1.0f))).xyz;
        float3 v1 = (mul(meshObject.mat4LocalToWorld, float4(_Vertices[_Indices[i + 1]], 1.0f))).xyz;
        float3 v2 = (mul(meshObject.mat4LocalToWorld, float4(_Vertices[_Indices[i + 2]], 1.0f))).xyz;

        // Normals
        float3 vNormal0 = (mul(meshObject.mat4LocalToWorld, float4(_Normals[_Indices[i]], 0.0f))).xyz;
        float3 vNormal1 = (mul(meshObject.mat4LocalToWorld, float4(_Normals[_Indices[i + 1]], 0.0f))).xyz;
        float3 vNormal2 = (mul(meshObject.mat4LocalToWorld, float4(_Normals[_Indices[i + 2]], 0.0f))).xyz;

        // UVs
        float2 uv0 = _UVs[_Indices[i]];
        float2 uv1 = _UVs[_Indices[i + 1]];
        float2 uv2 = _UVs[_Indices[i + 2]];

        float t, u, v;

        if (IntersectTriangle_MT97(r, v0, v1, v2, t, u, v)) {
            if (t > 0 && t < bestHit.distance) {
                bestHit.distance = t;
                bestHit.ptPosition = r.ptOrigin + t * r.vDirection;

                // Use u, v to interpolate normals
                float r_2 = 1.0f - u - v;
                bestHit.vNormal = vNormal1 * u + vNormal2 * v + vNormal0 * (r_2);

                float2 uv = u* uv1 + v * uv2 + (r_2) * uv0;

                float2 uv_p = float2(uv.x, uv.y);

                bestHit.cAlbedo = textureAlbedo.SampleLevel(samplertextureAlbedo, uv_p, 0).xyz;
                //bestHit.cAlbedo = float3(uv.x, uv.y, 0.0f);

                //bestHit.cAlbedo = 0.0f;
                //bestHit.cSpecular = 0.65f;
                //bestHit.smoothness = 0.99f;
                //bestHit.cEmission = 0.0f;
                

                // Diffuse
                //bestHit.cAlbedo = float3(0.8f, 0.8f, 0.8f);
                bestHit.cSpecular = 0.03f;
                bestHit.smoothness = 0.5f;
                bestHit.cEmission = 0.0f;

                // Reflective
                //bestHit.cAlbedo = 0.00f;
                //bestHit.cSpecular = 0.65f;// *float3(1, 0.4f, 0.2f);
                //bestHit.smoothness = 0.999f;
                //bestHit.cEmission = 0.0f;
            }
        }
    }
}

float3x3 GetTangentSpace(float3 vNormal) {
    float3 vHelper = float3(1.0f, 0.0f, 0.0f);
    if (abs(vNormal.x) > 0.99f)
        vHelper = float3(0.0f, 0.0f, 1.0f);

    // Generate basis
    float3 vTangent = normalize(cross(vNormal, vHelper));
    float3 vBinormal = normalize(cross(vNormal, vTangent));

    return float3x3(vTangent, vBinormal, vNormal);
}

// alpha controls the amount of phong exponent in sampling
float3 SampleHemisphere(float3 vNormal, float alpha) {
    // Uniformly sample hemisphere direction
    float cosTheta = pow(rand(), 1.0f / (alpha + 1.0f));
    float sinTheta = sqrt(1.0f - cosTheta * cosTheta);
    float phi = 2 * PI * rand();
    float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

    return mul(tangentSpaceDir, GetTangentSpace(vNormal));
}

void IntersectGroundPlane(Ray r, inout RayHit bestHit) {
    // Calculate distance along ray where the ground plane is intersected
    float t = -r.ptOrigin.y / r.vDirection.y;

    if (t > 0 && bestHit.distance) {
        bestHit.distance = t;
        bestHit.ptPosition = r.ptOrigin + t * r.vDirection;
        bestHit.vNormal = float3(0.0f, 1.0f, 0.0f);
        bestHit.cAlbedo = 0.5f;
        bestHit.cSpecular = 0.03f;
        bestHit.smoothness = 0.2f;
        bestHit.cEmission = float3(1.0f, 1.0f, 1.0f) * 0.0f;
    }
}

// Using sphere as xyz - ptOrigin, w - radius
void IntersectSphere(Ray r, inout RayHit bestHit, Sphere sphere) {
    
    float3 d = r.ptOrigin - sphere.ptPosition;
    float p1 = -dot(r.vDirection, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;

    if (p2sqr < 0)
        return;

    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance) {
        bestHit.distance = t;
        bestHit.ptPosition = r.ptOrigin + r.vDirection * t;
        bestHit.vNormal = normalize(bestHit.ptPosition - sphere.ptPosition);
        bestHit.cAlbedo = sphere.cAlbedo;
        bestHit.cSpecular = sphere.cSpecular;
        bestHit.smoothness = sphere.smoothness;
        bestHit.cEmission = sphere.cEmission;
    }
}

RayHit Trace(Ray r) {

    RayHit bestHit = CreateRayHit();
    uint count, stride, i;
    
    IntersectGroundPlane(r, bestHit);

    //// Trace single triangle
    //float3 v0 = float3(-150, 0, -150);
    //float3 v1 = float3(150, 0, -150);
    //float3 v2 = float3(0, 150 * sqrt(2), -150);
    //float t, u, v;
    //
    //if (IntersectTriangle_MT97(r, v0, v1, v2, t, u, v)) {
    //    if (t > 0 && t < bestHit.distance)
    //    {
    //        bestHit.distance = t;
    //        bestHit.ptPosition = r.ptOrigin + t * r.vDirection;
    //        bestHit.vNormal = normalize(cross(v1 - v0, v2 - v0));
    //        bestHit.cAlbedo = 0.00f;
    //        bestHit.cSpecular = 0.65f * float3(1, 0.4f, 0.2f);
    //        bestHit.smoothness = 0.9f;
    //        bestHit.cEmission = 0.0f;
    //    }
    //}

    //_Spheres.GetDimensions(count, stride);
    //for (i = 0; i < count; i++) {
    //    IntersectSphere(r, bestHit, _Spheres[i]);
    //}

    _MeshObjects.GetDimensions(count, stride);
    for (i = 0; i < count; i++) {
        IntersectMeshObject(r, bestHit, _MeshObjects[i]);
    }

    // Single Quad

    Quad tempQuad;

    tempQuad.verts[0] = float3(-10,  0, -10);      // BL
    tempQuad.verts[1] = float3( 10,  0, -10);       // BR
    tempQuad.verts[2] = float3(-10, 10, -10);    //TL
    tempQuad.verts[3] = float3( 10, 10, -10);     // TR

    tempQuad.uvs[0] = float2(1.0f, 0.0f);
    tempQuad.uvs[1] = float2(0.0f, 0.0f);
    tempQuad.uvs[2] = float2(1.0f, 1.0f);
    tempQuad.uvs[3] = float2(0.0f, 1.0f);
    
    IntersectQuad(r, bestHit, tempQuad);
    
    return bestHit;
}

float sdot(float3 x, float3 y, float f = 1.0f) {
    return saturate(dot(x, y) * f);
}

float energy(float3 c) {
    // Average the color channels
    return dot(c, (1.0f / 3.0f));
}

float3 Shade(inout Ray r, RayHit hit) {
   
    if (hit.distance < 1.#INF)
    {
        // Hit position
        r.ptOrigin = hit.ptPosition + hit.vNormal * 0.001f;

        hit.cAlbedo = min(1.0f - hit.cSpecular, hit.cAlbedo);
        float specularChance = energy(hit.cSpecular); 
        float diffuseChance = energy(hit.cAlbedo);

        float roulette = rand();
        
        if (roulette < specularChance) {
            // Specular
            float alpha = SmoothnessToPhongAlpha(hit.smoothness);
            r.vDirection = SampleHemisphere(reflect(r.vDirection, hit.vNormal), alpha);
            
            float f = (alpha + 2.0f) / (alpha + 1.0f); 

            r.energy *= (1.0f / specularChance) * hit.cSpecular * sdot(hit.vNormal, r.vDirection, f);
        }
        else if (diffuseChance > 0.0f && roulette < specularChance + diffuseChance) {
            // Diffuse
            r.vDirection = SampleHemisphere(hit.vNormal, 1.0f);
            r.energy *= (1.0f / diffuseChance) * hit.cAlbedo;
        }
        else {
            r.energy = 0.0f; 
        }

        return hit.cEmission;
    }
    else {        
        r.energy = 0.0f;

        float theta = acos(r.vDirection.y) / -PI;
        float phi = atan2(r.vDirection.x, -r.vDirection.z) / -PI * 0.5f;
        
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * 2.5f; // brighten the skybox a bit
    }
}

Ray CreateCameraRay(float2 uv) {
    // Transform camera origin to world space
    float3 ptOrigin = mul(mat4CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    // Invert the perspective projection of the view-space position
    float3 vDirection = mul(mat4InverseCameraProjection, float4(uv, 0.0f, 1.0f)).xyz;

    // Transform the direction from the camera to the world space and normalize
    vDirection = mul(mat4CameraToWorld, float4(vDirection, 0.0f)).xyz;
    vDirection = normalize(vDirection);
     
    return CreateRay(ptOrigin, vDirection);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID) 
{
    _Pixel = id.xy;

    // Get dimensions of render texture
    uint width, height;
    Result.GetDimensions(width, height);

    // Transform pixel to [-1, 1]
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);

    // Get a ray for the UVs
    float3 result = float3(0.0f, 0.0f, 0.0f);
    Ray r = CreateCameraRay(uv);

    for (int i = 0; i < 8; i++) {
        RayHit hit = Trace(r);
        result += r.energy * Shade(r, hit);

        if (!any(r.energy))
            break;
    }

    Result[id.xy] = float4(result, 1.0f); 
}
